# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SerialConfiguration.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import serial                       # Importamos la libreria serial.
import serial.tools.list_ports      # Modulo de la libreria Serial que nos permite ver ,los puertos serial actuales.
import time                         #Importa la libreria time para agreger un retraso en la inicializacion 

class Ui_SerialConfiguration(object):
    def setupUi(self, SerialConfiguration):
        SerialConfiguration.setObjectName("SerialConfiguration")
        SerialConfiguration.resize(440, 480)
        SerialConfiguration.setMinimumSize(QtCore.QSize(440, 480))
        SerialConfiguration.setMaximumSize(QtCore.QSize(440, 480))
        SerialConfiguration.setStyleSheet("border-color: rgb(85, 255, 255);\n"
"selection-background-color: rgb(85, 255, 255);")
        # Private Variables
        #Flags de selecion de informacion, evita que se repita la informacion 
        self.__PushedPortButton = False
        self.__PushedBaudRateButton = False
        self.__PushedByteSIzeButton = False
        self.__PushedParityButton = False
        self.__ReadyFlag = False
        #Variuable la cual recibe la informacion de configuracion 
        self.__DataFrameConfiguration = [' ',' ',' ',' ']
        # Private Variables
        self.Imagen = QtWidgets.QLabel(SerialConfiguration)
        self.Imagen.setGeometry(QtCore.QRect(180, 80, 81, 81))
        self.Imagen.setFrameShape(QtWidgets.QFrame.Box)
        self.Imagen.setText("")
        self.Imagen.setPixmap(QtGui.QPixmap("USB_SYmbol.jpg"))
        self.Imagen.setScaledContents(True)
        self.Imagen.setObjectName("Imagen")
        self.Titulo = QtWidgets.QLabel(SerialConfiguration)
        self.Titulo.setGeometry(QtCore.QRect(130, 20, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Linux Libertine G")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.Titulo.setFont(font)
        self.Titulo.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Titulo.setObjectName("Titulo")
        self.ButtonCancel = QtWidgets.QPushButton(SerialConfiguration)
        self.ButtonCancel.setGeometry(QtCore.QRect(280, 430, 101, 31))
        self.ButtonCancel.setObjectName("ButtonCancel")
        self.VerificaPuertos = QtWidgets.QPushButton(SerialConfiguration)
        self.VerificaPuertos.setGeometry(QtCore.QRect(20, 170, 171, 23))
        self.VerificaPuertos.setAutoRepeat(False)
        self.VerificaPuertos.setObjectName("VerificaPuertos")
        self.PuertoSerialDisponible = QtWidgets.QComboBox(SerialConfiguration)
        self.PuertoSerialDisponible.setGeometry(QtCore.QRect(20, 210, 171, 22))
        self.PuertoSerialDisponible.setEditable(False)
        self.PuertoSerialDisponible.setCurrentText("")
        self.PuertoSerialDisponible.setMinimumContentsLength(0)
        self.PuertoSerialDisponible.setObjectName("PuertoSerialDisponible")
        self.ButtonAccept = QtWidgets.QPushButton(SerialConfiguration)
        self.ButtonAccept.setGeometry(QtCore.QRect(170, 430, 101, 31))
        self.ButtonAccept.setObjectName("ButtonAccept")
        self.ButtonApply = QtWidgets.QPushButton(SerialConfiguration)
        self.ButtonApply.setGeometry(QtCore.QRect(60, 430, 101, 31))
        self.ButtonApply.setObjectName("ButtonApply")
        self.LIstaBaudRate = QtWidgets.QComboBox(SerialConfiguration)
        self.LIstaBaudRate.setGeometry(QtCore.QRect(20, 290, 171, 22))
        self.LIstaBaudRate.setEditable(False)
        self.LIstaBaudRate.setCurrentText("")
        self.LIstaBaudRate.setMinimumContentsLength(0)
        self.LIstaBaudRate.setObjectName("LIstaBaudRate")
        self.VerBaudRate = QtWidgets.QPushButton(SerialConfiguration)
        self.VerBaudRate.setGeometry(QtCore.QRect(20, 250, 171, 23))
        self.VerBaudRate.setObjectName("VerBaudRate")
        self.ButtonParity = QtWidgets.QPushButton(SerialConfiguration)
        self.ButtonParity.setGeometry(QtCore.QRect(230, 250, 171, 23))
        self.ButtonParity.setObjectName("ButtonParity")
        self.ListByteSize = QtWidgets.QComboBox(SerialConfiguration)
        self.ListByteSize.setGeometry(QtCore.QRect(230, 210, 171, 22))
        self.ListByteSize.setEditable(False)
        self.ListByteSize.setCurrentText("")
        self.ListByteSize.setMinimumContentsLength(0)
        self.ListByteSize.setObjectName("ListByteSize")
        self.ListParity = QtWidgets.QComboBox(SerialConfiguration)
        self.ListParity.setGeometry(QtCore.QRect(230, 290, 171, 22))
        self.ListParity.setEditable(False)
        self.ListParity.setCurrentText("")
        self.ListParity.setMinimumContentsLength(0)
        self.ListParity.setObjectName("ListParity")
        self.ShowByteSize = QtWidgets.QPushButton(SerialConfiguration)
        self.ShowByteSize.setGeometry(QtCore.QRect(230, 170, 171, 23))
        self.ShowByteSize.setAutoRepeat(False)
        self.ShowByteSize.setObjectName("ShowByteSize")
        self.Termianal = QtWidgets.QLabel(SerialConfiguration)
        self.Termianal.setGeometry(QtCore.QRect(50, 350, 341, 61))
        self.Termianal.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.Termianal.setText("")
        self.Termianal.setObjectName("Termianal")

        self.retranslateUi(SerialConfiguration)
        self.ButtonCancel.clicked.connect(SerialConfiguration.close)
        self.ButtonApply.clicked.connect(self.ApplySerialConfiguration)
        self.ButtonAccept.clicked.connect(SerialConfiguration.close)
        self.VerificaPuertos.clicked.connect(self.AvailableSerialPort)
        self.VerBaudRate.clicked.connect(self.AvailableBaudRate)
        self.ShowByteSize.clicked.connect(self.AvailableByteSize)
        self.ButtonParity.clicked.connect(self.AvailableParity)
        QtCore.QMetaObject.connectSlotsByName(SerialConfiguration)

    #Funcion que nos permite buscar y ver los puertos seriales actuales
    def AvailableSerialPort(self):
        if self.__PushedPortButton == False:
            self.__PushedPortButton = True
            #Se necesita mejorer esta parte con un algoritmo para evitsr los errores y la seleccio manual de pueetos
            ports = list(serial.tools.list_ports.comports())
            try:
                AvailableSerial = [ports[0].device,ports[1].device]
                self.PuertoSerialDisponible.addItems(AvailableSerial)
            except:
                AvailableSerial = [ports[0].device]
                self.PuertoSerialDisponible.addItems(AvailableSerial)
        else:
            self.Termianal.setText("Boton ya presionado")
            
        
    def ApplySerialConfiguration(self):
        #Validacion de estados para pasar la informacion a la clase @SetUpSerialConfiguration 
        if (self.__PushedBaudRateButton and self.__PushedByteSIzeButton and self.__PushedParityButton and self.__PushedPortButton):
            self.__ReadyFlag = True
        else:
            self.__ReadyFlag = False
        #Vaciado de informacion del texto actual y paso a ala varibles de configuracion     
        Port = self.PuertoSerialDisponible.currentText()
        BuadRateCurrent = self.LIstaBaudRate.currentText()
        ByteSize = self.ListByteSize.currentText()
        ParityObjt = self.ListParity.currentText()
        #Asignamos la informacion en la lista self.__DataFrameConfiguration 
        self.__DataFrameConfiguration[0] = Port
        self.__DataFrameConfiguration[1] = BuadRateCurrent
        self.__DataFrameConfiguration[2] = ByteSize
        self.__DataFrameConfiguration[3] = ParityObjt
        WriteInfo = open("SerialConfiguration.txt","w")
        # WriteInfo.write('Hola mundo\n')
        WriteInfo.writelines("%s," %s for s in self.__DataFrameConfiguration)
        WriteInfo.close()
        #

        #Se imprime en terminal (Cuadro de la parte inferior) la informacion actual
        self.Termianal.setText("Puerto Seleccionado: "+Port +'\n'+ "Baudrate Seleccionado: "+ BuadRateCurrent + '\n' 
        + "BytetSize Seleccionado:" + ByteSize + '\n'+ "Parity Selecciinada: "+ ParityObjt)
        
    #Funcion que habilita la seleccion de informacion del BaudRate
    def AvailableBaudRate(self):
        if self.__PushedBaudRateButton == False:
            self.__PushedBaudRateButton = True
            __BaudRateList = ['1200','2400','4800','9600','14400','19200','28800','38400','57600','115200','230400']
            self.LIstaBaudRate.addItems(__BaudRateList)
        else:
            self.Termianal.setText("Boton ya presionado")
    #Funcion que habilita la seleccion de informacion del ByteSize
    def AvailableByteSize(self):
        if self.__PushedByteSIzeButton == False:
            self.__PushedByteSIzeButton = True
            ByteSizeList = [str(serial.SIXBITS),str(serial.SEVENBITS),str(serial.EIGHTBITS)]
            self.ListByteSize.addItems(ByteSizeList)
        else:
            self.Termianal.setText("Boton ya presionado")
    #Fucnion que habilita la selecion de informacion de Parity 
    def AvailableParity(self):
        if self.__PushedParityButton == False:
            self.__PushedParityButton = True
            ParityList = [str(serial.PARITY_NONE),str(serial.PARITY_EVEN),str(serial.PARITY_MARK),str(serial.PARITY_NAMES),
            str(serial.PARITY_ODD),str(serial.PARITY_SPACE)
            ]
            self.ListParity.addItems(ParityList)
        else:
            self.Termianal.setText("Boton ya presionado")
    #Fucnion que retorna la informacion de la configuracion
    def PassTheConfiguration(self):
        if self.__ReadyFlag == False:
            return "Nel Carnal"
        else:
            
            return self.__DataFrameConfiguration

    def retranslateUi(self, SerialConfiguration):
        _translate = QtCore.QCoreApplication.translate
        SerialConfiguration.setWindowTitle(_translate("SerialConfiguration", "Form"))
        self.Titulo.setText(_translate("SerialConfiguration", "Serial Configuration"))
        self.ButtonCancel.setText(_translate("SerialConfiguration", "Cancel"))
        self.VerificaPuertos.setText(_translate("SerialConfiguration", "Ver puertos disponibles:"))
        self.ButtonAccept.setText(_translate("SerialConfiguration", "Accept"))
        self.ButtonApply.setText(_translate("SerialConfiguration", "Apply"))
        self.VerBaudRate.setText(_translate("SerialConfiguration", "BaudRate"))
        self.ButtonParity.setText(_translate("SerialConfiguration", "Parity"))
        self.ShowByteSize.setText(_translate("SerialConfiguration", "ByteSize"))

#Creamos la clase que Configura el puerto serial, ademas de funciones para la recepcion de informacion.
class SetUpSerialConfiguration():
    def __init__(self,SerialPort,BaudRate = 9600, ByteSize = serial.EIGHTBITS,Parity = None, TimeOut = 2):
        self.SerialPort = SerialPort
        self.BaudRate = BaudRate
        self.ByteSize = ByteSize
        self.Parity = Parity
        self.TimeOut = TimeOut
        self.DataFrame = 0
    #Funcion que inicia la conexion serial
    def Init_Connection(self):
        try:
            SerialPortInit = serial.Serial(port=self.SerialPort,baudrate=self.BaudRate,
            bytesize=self.ByteSize,parity=self.Parity,timeout=self.TimeOut)
        except:
            return "Fallo de conexion"
        self.SerialPortClass = SerialPortInit
        time.sleep(0.1)
        self.SerialPortClass.flushInput()
    #Funcion que cierra la conecion serial
    def Close_Connection(self):
        self.SerialPortClass.close()
        return "Cerrando conexion serial"
    #Fucnion que retorna los bytes esperado 
    def Is_Read(self, ByteExpected):
        return self.SerialPortClass.in_waiting >= ByteExpected 
    #Funcion que Obtiene los frame de informacion ademas de la decodificacion
    def GetDataFrame(self):
        if self.DataFrame:
            ByteToRead = self.SerialPortClass.in_waiting
            if ByteToRead > 0:
                Serial_IncomeFrame = self.SerialPortClass.read(ByteToRead)
                Serial_IncomeFrame = Serial_IncomeFrame.decode("utf-8")

        else:
            self.SerialPortClass.reset_input_buffer()
            self.SerialPortClass.readline()
            self.DataFrame = 1

def SeparaLista(Lista,Caracter):
    cadena = str(Lista)
    cadena = cadena.split(str(Caracter))
    return cadena

